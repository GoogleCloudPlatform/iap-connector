/*
 * Copyright 2018 Google LLC. This software is provided as-is,
 * without warranty or representation for any use or purpose.
 * Your use of it is subject to your agreements with Google.
 */

pipeline {
    agent {
        node {
        label 'chef'
        }
    }
    options {
        disableConcurrentBuilds()
    }
    parameters {
        /* More parameter types described here: https://jenkins.io/doc/book/pipeline/syntax/#parameters */
        booleanParam(name: 'refresh', defaultValue: true, description: 'Refresh job config to update UI from Pipeline')
        choice(name: 'action', choices: ['apply', 'delete'], description: 'action to apply or delete kubernetes deployment')
        string(name: 'cluster_project_id', defaultValue: '', description: 'project ID where kubernetes cluster is running')
        string(name: 'cluster_name', defaultValue: '', description: 'kubernetes cluster name to deploy to')
        string(name: 'cluster_region', defaultValue: '', description: 'kubernetes cluster region')
    }
    environment {
        // Directory to be used to clone the project's code into
        PROJECT_DIR = "${env.WORKSPACE}/gcp-iap-connector"
        // Set deploy environment for helm
        DEPLOY_ENV = "${env.PROJECT_DIR}/helm"
        GCP_CREDS_ID_PREFIX = "gcp-iap"
        GITHUB_CREDS_ID = "svc-jenkins"
        // CSV of approvers for this job - must be local Jenkins users, LDAP users, or LDAP groups
        // TODO remove id and replace with an LDAP group
        APPROVERS = "ITX_Systems-Engineering,ITX_Systems-Operations"
    }
    stages {
        stage('Init') {
            steps {
                script {
                    if (params.refresh) {
                        // Simply abort the job early if we want to refresh the UI elements of job config after initial import or changes
                        currentBuild.result = 'ABORTED'
                        error('Refreshing job configuration from Pipeline DSL.')
                    }
                    def (origin, branch) =  "${env.GIT_BRANCH}".split('/')
                    // get the environment from the branch
                    environment = "${branch}"
                    GCP_CREDS_ID = "${env.GCP_CREDS_ID_PREFIX}-${environment}"
                }
                withCredentials([file(credentialsId: "${GCP_CREDS_ID}", variable: 'GC_KEY')]) {
                    sh("gcloud auth activate-service-account --key-file=${GC_KEY}")
                }
                sh("gcloud container clusters get-credentials ${params.cluster_name} --region ${params.cluster_region} --project ${params.cluster_project_id} --internal-ip")
                dir ("${env.PROJECT_DIR}"){
                    checkout scm: [
                        $class: 'GitSCM', userRemoteConfigs: [
                            [
                                url: 'git@github.airbnb.biz:Airbnb-ITX/gcp-iap-connector.git',
                                credentialsId: "${env.GITHUB_CREDS_ID}",
                                changelog: false,
                            ]
                        ],
                        branches: [
                            [
                                name: "${env.GIT_BRANCH}"
                            ]
                        ],
                        poll: false
                    ]
                }
            }
        }
        stage('Deploy kube-dns') {
            steps {
                input(message: "\nContinue with action: ${params.action}?\n", submitter: "${env.APPROVERS}")
                echo "${params.action} kube dns configmap: ${PROJECT_DIR}/kube"
                // deploy the custom kube-dns manifest
                dir ("${PROJECT_DIR}/kube") {
                    sh("kubectl ${params.action} -f kube-dns.yaml")
                }
            }
        }
        stage('Deploy helm') {
            steps {
                echo "${params.action} helm chart: $DEPLOY_ENV"
                // Run the following steps from the DEPLOY_ENV directory
                dir ("$DEPLOY_ENV") {
                    sh("helm template -n iap-connector ./iap-connector/ -f values/values_${params.cluster_name}.yaml | kubectl ${params.action} -f -")
                    // give sometime for the resources to create or delete
                    sleep(time:180,unit:"SECONDS")
                    // review resources created for iap connector
                    sh("kubectl get all")
                }
            }
        }
        stage('Run post deployment steps') {
            steps {
                echo "running : ${PROJECT_DIR}/scripts/post-deployment.sh"
                // run the post deployment script
                dir ("${PROJECT_DIR}/scripts") {
                    sh("./post-deployment.sh ${params.cluster_project_id}")
                }
            }
        }
    }
    // Post describes the steps to take when the pipeline finishes
    post {
        success {
            echo "Apply complete!"
        }
        always {
            echo "Clearing workspace"
            sh "gcloud auth revoke"
            deleteDir() // Clean up the local workspace so we don't leave behind a mess, or sensitive files
        }
    }
}
